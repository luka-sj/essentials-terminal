#===============================================================================
#  `String` class extensions
#===============================================================================
class ::String
  #-----------------------------------------------------------------------------
  #  turns string into an actual Ruby object
  #-----------------------------------------------------------------------------
  def constantize
    Object.const_get(self)
  end
  #-----------------------------------------------------------------------------
  #  capitalize first letter
  #-----------------------------------------------------------------------------
  def capitalize
    sub(/^\w/) { $&.upcase }
  end
  #-----------------------------------------------------------------------------
  #  turn to camel case
  #-----------------------------------------------------------------------------
  def camelize
    split('_').map(&:downcase).map(&:capitalize).join('')
  end
  #-----------------------------------------------------------------------------
  #  turn to snake case
  #-----------------------------------------------------------------------------
  def underscore
    return downcase if match(/\A[A-Z]+\z/)

    gsub(/([A-Z]+)([A-Z][a-z])/, '\1_\2').gsub(/([a-z])([A-Z])/, '\1_\2').downcase
  end
  #-----------------------------------------------------------------------------
  #  checks if string is in URL format
  #-----------------------------------------------------------------------------
  def url?
    scan(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()!@:%_\+.~#?&\/\/=]*)/).count.positive?
  end
  #-----------------------------------------------------------------------------
  #  checks if string contains only numeric values
  #-----------------------------------------------------------------------------
  def numeric?
    scan(/^[+-]?([0-9]+)(?:\.[0-9]+)?$/).count > 1
  end
  #-----------------------------------------------------------------------------
  #  interpolate `${}` values in string based on hash
  #-----------------------------------------------------------------------------
  def interpolate(options = {})
    replace_hash = {}.tap do |h|
      options.keys.each do |key|
        h["${#{key}}"] = options[key]
      end
    end

    regex_values = Regexp.new(replace_hash.keys.map { |x| Regexp.escape(x) }.join('|'))
    gsub(regex_values, replace_hash)
  end
  #-----------------------------------------------------------------------------
end
